.program mitsubishi_heavy_ir_data

.define BURST_IRQ 7                     ; the IRQ used to trigger a carrier burst
.define DATA_IRQ 6                      ; the IRQ used to trigger data transmision

.wrap_target
    mov Y, ISR              ; counter is stored in ISR
    wait 1 irq DATA_IRQ            
    
data_bit:
    out X, 1                            
    irq BURST_IRQ                       
    nop [2]
    jmp !X burst                        
    nop [7]                                 
burst:
jmp Y-- data_bit                      
irq BURST_IRQ
out X, 8

.wrap                                   


% c-sdk {
static inline void mitsubishi_heavy_ir_data_program_init (PIO pio, uint sm, uint offset, float tick_rate, int bits_per_frame) {

    pio_sm_config c = mitsubishi_heavy_ir_data_program_get_default_config(offset);

    sm_config_set_out_shift (&c,
                             true,       // shift right
                             true,      // enable autopull
                             bits_per_frame);


    sm_config_set_fifo_join (&c, PIO_FIFO_JOIN_TX);

    float div = clock_get_hz (clk_sys) / tick_rate;
    sm_config_set_clkdiv (&c, div);

    pio_sm_init(pio, sm, offset, &c);

    // set up the counter
    //
    pio_sm_put_blocking(pio, sm, 151);
    pio_sm_exec_wait_blocking(pio, sm, pio_encode_out(pio_isr, 32));
    pio_sm_set_enabled(pio, sm, true);
}
%}
